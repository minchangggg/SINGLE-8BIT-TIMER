# //  Questa Sim-64
# //  Version 10.2c Unknown Platform Jul 19 2013
# //
# //  Copyright 1991-2013 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY INFORMATION
# //  WHICH IS THE PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS
# //  LICENSORS AND IS SUBJECT TO LICENSE TERMS.
# //
# vsim -do {add wave vsim:/tb_ip_TIMER/*; radix -hexadecimal} -i -view vsim.wlf 
# vsim.wlf opened as dataset "vsim"
# add wave vsim:/tb_ip_TIMER/* 
#  radix -hexadecimal 
# hexadecimal

vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3812) Design is being optimized...
# 
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# ** Note: (vopt-143) Recognized 1 FSM in module "APB_trans(fast)".
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xa2 ===
#   inc_needed=350, pclk_cycles_to_ovf=700, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 2045000 (after 187 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xaf
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x11 ===
#   inc_needed=239, pclk_cycles_to_ovf=956, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc2
# CKS=1 Thread1: PASS - OVF observed at time 15265000 (after 954 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x8e ===
#   inc_needed=370, pclk_cycles_to_ovf=2960, margin=100
# CKS=2 Thread1: PASS - OVF observed at time 24545000 (after 908 cycles), TCNT=0x0
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x8e
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x49 ===
#   inc_needed=183, pclk_cycles_to_ovf=2928, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc7
# CKS=3 Thread1: PASS - OVF observed at time 65345000 (after 2926 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
#   dec_needed=112, pclk_cycles_to_udf=224, margin=100
# CKS=0 Thread1: PASS - UDF observed at time 65565000 (after 2 cycles), TCNT=0xfe
# CKS=0 Thread2: FAULT - UDF set but TCNT not zero TSR=0x2, TCNT=0xc6
# CKS=0: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
#   dec_needed=-43, pclk_cycles_to_udf=-172, margin=100
# CKS=1 Thread1 TIMEOUT: TCNT=0x0, TCR=0x31, steps=-43 factor=4
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=1: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
#   dec_needed=-36, pclk_cycles_to_udf=-288, margin=100
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-36 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
#   dec_needed=33, pclk_cycles_to_udf=528, margin=100
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf
# CKS=3 Thread1: PASS - UDF observed at time 72545000 (after 522 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 72585000, Total errors: 3 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(337)
#    Time: 72585 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 337
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 

vcover report -html tb_ip_TIMER.ucdbvcover report -html tb_ip_TIMER.ucdb
# ** Error: (vlib-4006) Unexpected argument '-html'.
# 
# vcover report -html [-htmldir <outdir>] [-verbose] [-code [bcesf(t|x)]] [-assert]
#                     [-cvg] [-(instance <pathname>|duonly)] [-directive]
#                     [-nodetails] [-noframes] [-nosource] [-notestplan] [-nofec] [-noudp]
#                     [-notimestamps] [-nozeroweights] [-noignorebins] [-binrhs]
#                     [-hidecvginsts] [-hidecvginstspi0] [-usecnpm] [-testhitdata]
#                     [-precision <int>] [-threshH <pct>] [-threshL <pct>] [-summary]
#                     [-stmtaltflow] [-hideexcluded] [-dynamic] [-servermode] [-stopserver]
#                     [-port <number>] <ucdb-file>


vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html

vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
vcover report -html tb_ip_TIMER.ucdbvcover report -html tb_ip_TIMER.ucdb
# ** Error: (vlib-4006) Unexpected argument '-html'.
# 
# vcover report -html [-htmldir <outdir>] [-verbose] [-code [bcesf(t|x)]] [-assert]
#                     [-cvg] [-(instance <pathname>|duonly)] [-directive]
#                     [-nodetails] [-noframes] [-nosource] [-notestplan] [-nofec] [-noudp]
#                     [-notimestamps] [-nozeroweights] [-noignorebins] [-binrhs]
#                     [-hidecvginsts] [-hidecvginstspi0] [-usecnpm] [-testhitdata]
#                     [-precision <int>] [-threshH <pct>] [-threshL <pct>] [-summary]
#                     [-stmtaltflow] [-hideexcluded] [-dynamic] [-servermode] [-stopserver]
#                     [-port <number>] <ucdb-file>
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xa2 ===
#   inc_needed=350, pclk_cycles_to_ovf=700, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 2045000 (after 187 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xaf
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x11 ===
#   inc_needed=239, pclk_cycles_to_ovf=956, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc2
# CKS=1 Thread1: PASS - OVF observed at time 15265000 (after 954 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x8e ===
#   inc_needed=370, pclk_cycles_to_ovf=2960, margin=100
# CKS=2 Thread1: PASS - OVF observed at time 24545000 (after 908 cycles), TCNT=0x0
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x8e
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x49 ===
#   inc_needed=183, pclk_cycles_to_ovf=2928, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc7
# CKS=3 Thread1: PASS - OVF observed at time 65345000 (after 2926 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
#   dec_needed=112, pclk_cycles_to_udf=224, margin=100
# CKS=0 Thread1: PASS - UDF observed at time 65565000 (after 2 cycles), TCNT=0xfe
# CKS=0 Thread2: FAULT - UDF set but TCNT not zero TSR=0x2, TCNT=0xc6
# CKS=0: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
#   dec_needed=-43, pclk_cycles_to_udf=-172, margin=100
# CKS=1 Thread1 TIMEOUT: TCNT=0x0, TCR=0x31, steps=-43 factor=4
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=1: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
#   dec_needed=-36, pclk_cycles_to_udf=-288, margin=100
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-36 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
#   dec_needed=33, pclk_cycles_to_udf=528, margin=100
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf
# CKS=3 Thread1: PASS - UDF observed at time 72545000 (after 522 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 72585000, Total errors: 3 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(337)
#    Time: 72585 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 337
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# ** Error: tb/tb_ip_TIMER.sv(280): near "latency": syntax error, unexpected end of source code, expecting ')' or ','
# C:/questasim64_10.2c/win64/vlog failed.
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xa2 (upcount) ===
#   inc_needed=94, pclk_cycles_to_ovf=188, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 2045000 (after 187 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x5
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x11 (upcount) ===
#   inc_needed=239, pclk_cycles_to_ovf=956, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc2
# CKS=1 Thread1: PASS - OVF observed at time 11865000 (after 955 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x8e (upcount) ===
#   inc_needed=114, pclk_cycles_to_ovf=912, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x59
# CKS=10 Thread1 TIMEOUT: TCNT=0x83, TCR=0x12, steps=114 factor=8
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x49 (upcount) ===
#   inc_needed=183, pclk_cycles_to_ovf=2928, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc8
# CKS=3 Thread1: PASS - OVF observed at time 51585000 (after 2918 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
#   dec_needed=112, pclk_cycles_to_udf=224, margin=100
# CKS=0 Thread1: PASS - UDF observed at time 51805000 (after 2 cycles), TCNT=0xfe
# CKS=0 Thread2: FAULT - UDF set but TCNT unexpected TSR=0x2, TCNT=0xc6
# CKS=0: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
#   dec_needed=213, pclk_cycles_to_udf=852, margin=100
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x68
# CKS=1 Thread1: PASS - UDF observed at time 61625000 (after 850 cycles), TCNT=0xff
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
#   dec_needed=220, pclk_cycles_to_udf=1760, margin=100
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x8c
# CKS=10 Thread1 TIMEOUT: TCNT=0x12, TCR=0x32, steps=220 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
#   dec_needed=33, pclk_cycles_to_udf=528, margin=100
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf
# CKS=3 Thread1: PASS - UDF observed at time 85825000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 85865000, Total errors: 3 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(358)
#    Time: 85865 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 358
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xa2 (upcount) ===
#   inc_needed=94, pclk_cycles_to_ovf=188, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 2045000 (after 187 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x5
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x11 (upcount) ===
#   inc_needed=239, pclk_cycles_to_ovf=956, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc2
# CKS=1 Thread1: PASS - OVF observed at time 11865000 (after 955 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x8e (upcount) ===
#   inc_needed=114, pclk_cycles_to_ovf=912, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x59
# CKS=10 Thread1 TIMEOUT: TCNT=0x83, TCR=0x12, steps=114 factor=8
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x49 (upcount) ===
#   inc_needed=183, pclk_cycles_to_ovf=2928, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc8
# CKS=3 Thread1: PASS - OVF observed at time 51585000 (after 2918 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
#   dec_needed=112, pclk_cycles_to_udf=224, margin=100
# CKS=0 Thread1: PASS - UDF observed at time 51805000 (after 2 cycles), TCNT=0xfe
# CKS=0 Thread2: FAULT - UDF set but TCNT unexpected TSR=0x2, TCNT=0xc6
# CKS=0: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
#   dec_needed=213, pclk_cycles_to_udf=852, margin=100
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x68
# CKS=1 Thread1: PASS - UDF observed at time 61625000 (after 850 cycles), TCNT=0xff
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
#   dec_needed=220, pclk_cycles_to_udf=1760, margin=100
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x8c
# CKS=10 Thread1 TIMEOUT: TCNT=0x12, TCR=0x32, steps=220 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
#   dec_needed=33, pclk_cycles_to_udf=528, margin=100
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf
# CKS=3 Thread1: PASS - UDF observed at time 85825000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 85865000, Total errors: 3 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(358)
#    Time: 85865 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 358
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xa2 (upcount) ===
#   inc_needed=94, pclk_cycles_to_ovf=188, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 2045000 (after 187 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x5
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x11 (upcount) ===
#   inc_needed=239, pclk_cycles_to_ovf=956, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc2
# CKS=1 Thread1: PASS - OVF observed at time 11865000 (after 955 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x8e (upcount) ===
#   inc_needed=114, pclk_cycles_to_ovf=912, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x59
# CKS=10 Thread1 TIMEOUT: TCNT=0x83, TCR=0x12, steps=114 factor=8
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x49 (upcount) ===
#   inc_needed=183, pclk_cycles_to_ovf=2928, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc8
# CKS=3 Thread1: PASS - OVF observed at time 51585000 (after 2918 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
#   dec_needed=112, pclk_cycles_to_udf=224, margin=100
# CKS=0 Thread1: PASS - UDF observed at time 51805000 (after 2 cycles), TCNT=0xfe
# CKS=0 Thread2: FAULT - UDF set but TCNT unexpected TSR=0x2, TCNT=0xc6
# CKS=0: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
#   dec_needed=213, pclk_cycles_to_udf=852, margin=100
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x68
# CKS=1 Thread1: PASS - UDF observed at time 61625000 (after 850 cycles), TCNT=0xff
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
#   dec_needed=220, pclk_cycles_to_udf=1760, margin=100
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x8c
# CKS=10 Thread1 TIMEOUT: TCNT=0x12, TCR=0x32, steps=220 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
#   dec_needed=33, pclk_cycles_to_udf=528, margin=100
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf
# CKS=3 Thread1: PASS - UDF observed at time 85825000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 85865000, Total errors: 3 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(339)
#    Time: 85865 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 339
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xa2 (upcount) ===
#   inc_needed=94, pclk_cycles_to_ovf=188, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 2045000 (after 187 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x5
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x11 (upcount) ===
#   inc_needed=239, pclk_cycles_to_ovf=956, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc2
# CKS=1 Thread1: PASS - OVF observed at time 11865000 (after 955 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x8e (upcount) ===
#   inc_needed=114, pclk_cycles_to_ovf=912, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x59
# CKS=10 Thread1 TIMEOUT: TCNT=0x83, TCR=0x12, steps=114 factor=8
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x49 (upcount) ===
#   inc_needed=183, pclk_cycles_to_ovf=2928, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc8
# CKS=3 Thread1: PASS - OVF observed at time 51585000 (after 2918 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
#   dec_needed=112, pclk_cycles_to_udf=224, margin=100
# CKS=0 Thread1: PASS - UDF observed at time 51805000 (after 2 cycles), TCNT=0xfe
# CKS=0 Thread2: FAULT - UDF set but TCNT unexpected TSR=0x2, TCNT=0xc6
# CKS=0: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
#   dec_needed=213, pclk_cycles_to_udf=852, margin=100
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x68
# CKS=1 Thread1: PASS - UDF observed at time 61625000 (after 850 cycles), TCNT=0xff
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
#   dec_needed=220, pclk_cycles_to_udf=1760, margin=100
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x8c
# CKS=10 Thread1 TIMEOUT: TCNT=0x12, TCR=0x32, steps=220 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
#   dec_needed=33, pclk_cycles_to_udf=528, margin=100
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf
# CKS=3 Thread1: PASS - UDF observed at time 85825000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 85865000, Total errors: 3 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(339)
#    Time: 85865 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 339
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xb8 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=328, pclk_cycles_to_ovf=656, margin=100, th2_wait=504
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 1615000 (after 140 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb8
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xb6 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=330, pclk_cycles_to_ovf=1320, margin=100, th2_wait=946
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 8395000 (after 289 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa5
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x72 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=142, pclk_cycles_to_ovf=1136, margin=100, th2_wait=824
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xda
# CKS=2 Thread1: PASS - OVF observed at time 26475000 (after 1126 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x3a (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=198, pclk_cycles_to_ovf=3168, margin=100, th2_wait=2178
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8a
# CKS=11 Thread1 TIMEOUT: TCNT=0xce, TCR=0x13, steps=198 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=111, pclk_cycles_to_udf=222, margin=100, th2_wait=214
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xff
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 61835000 (after 219 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=-44, pclk_cycles_to_udf=-176, margin=100, th2_wait=-50
# CKS=1 Thread1 TIMEOUT: TCNT=0x0, TCR=0x31, steps=-44 factor=4
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=1: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-37, pclk_cycles_to_udf=-296, margin=100, th2_wait=-130
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-37 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=32, pclk_cycles_to_udf=512, margin=100, th2_wait=408
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x6
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 67755000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 67795000, Total errors: 9 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(389)
#    Time: 67795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 389
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xb8 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=328, pclk_cycles_to_ovf=656, margin=100, th2_wait=504
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 1615000 (after 140 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb8
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xb6 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=330, pclk_cycles_to_ovf=1320, margin=100, th2_wait=946
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 8395000 (after 289 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa5
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x72 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=142, pclk_cycles_to_ovf=1136, margin=100, th2_wait=824
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xda
# CKS=2 Thread1: PASS - OVF observed at time 26475000 (after 1126 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x3a (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=198, pclk_cycles_to_ovf=3168, margin=100, th2_wait=2178
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8a
# CKS=11 Thread1 TIMEOUT: TCNT=0xce, TCR=0x13, steps=198 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=111, pclk_cycles_to_udf=222, margin=100, th2_wait=214
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xff
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 61835000 (after 219 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=-44, pclk_cycles_to_udf=-176, margin=100, th2_wait=-50
# CKS=1 Thread1 TIMEOUT: TCNT=0x0, TCR=0x31, steps=-44 factor=4
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=1: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-37, pclk_cycles_to_udf=-296, margin=100, th2_wait=-130
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-37 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=32, pclk_cycles_to_udf=512, margin=100, th2_wait=408
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x6
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 67755000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 67795000, Total errors: 9 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(389)
#    Time: 67795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 389
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xb8 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=328, pclk_cycles_to_ovf=656, margin=100, th2_wait=504
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 1615000 (after 140 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb8
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xb6 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=330, pclk_cycles_to_ovf=1320, margin=100, th2_wait=946
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 8395000 (after 289 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa5
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x72 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=142, pclk_cycles_to_ovf=1136, margin=100, th2_wait=824
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xda
# CKS=2 Thread1: PASS - OVF observed at time 26475000 (after 1126 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x3a (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=198, pclk_cycles_to_ovf=3168, margin=100, th2_wait=2178
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8a
# CKS=11 Thread1 TIMEOUT: TCNT=0xce, TCR=0x13, steps=198 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=111, pclk_cycles_to_udf=222, margin=100, th2_wait=214
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xff
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 61835000 (after 219 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=-44, pclk_cycles_to_udf=-176, margin=100, th2_wait=-50
# CKS=1 Thread1 TIMEOUT: TCNT=0x0, TCR=0x31, steps=-44 factor=4
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=1: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-37, pclk_cycles_to_udf=-296, margin=100, th2_wait=-130
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-37 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=32, pclk_cycles_to_udf=512, margin=100, th2_wait=408
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x6
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 67755000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 67795000, Total errors: 9 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(365)
#    Time: 67795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 365
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# === TEST for CKS=0, start=0xb8 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=328, pclk_cycles_to_ovf=656, margin=100, th2_wait=504
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 1615000 (after 140 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb8
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xb6 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=330, pclk_cycles_to_ovf=1320, margin=100, th2_wait=946
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 8395000 (after 289 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa5
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x72 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=142, pclk_cycles_to_ovf=1136, margin=100, th2_wait=824
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xda
# CKS=2 Thread1: PASS - OVF observed at time 26475000 (after 1126 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x3a (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=198, pclk_cycles_to_ovf=3168, margin=100, th2_wait=2178
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8a
# CKS=11 Thread1 TIMEOUT: TCNT=0xce, TCR=0x13, steps=198 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=0, start=0x6f (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=111, pclk_cycles_to_udf=222, margin=100, th2_wait=214
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xff
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 61835000 (after 219 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xd4 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=-44, pclk_cycles_to_udf=-176, margin=100, th2_wait=-50
# CKS=1 Thread1 TIMEOUT: TCNT=0x0, TCR=0x31, steps=-44 factor=4
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=1: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=2, start=0xdb (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-37, pclk_cycles_to_udf=-296, margin=100, th2_wait=-130
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-37 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x20 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=32, pclk_cycles_to_udf=512, margin=100, th2_wait=408
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x6
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 67755000 (after 518 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 67795000, Total errors: 9 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(365)
#    Time: 67795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 365
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 122285000, Total errors: 11 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(618)
#    Time: 122285 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 618
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=1
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 122285000, Total errors: 11 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(618)
#    Time: 122285 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 618
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xdd ===
#   inc_needed=291, pclk_cycles_to_ovf=582, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 55925000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xe3
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x2e ===
#   inc_needed=210, pclk_cycles_to_ovf=840, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=1 Thread1: PASS - OVF observed at time 69025000 (after 838 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x45 ===
#   inc_needed=187, pclk_cycles_to_ovf=1496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 84145000 (after 1492 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xb6 ===
#   inc_needed=330, pclk_cycles_to_ovf=5280, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xe3
# CKS=3 Thread1: PASS - OVF observed at time 124865000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 125105000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 127435000 (after 124 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 130555000 (after 262 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 130845000, Total errors: 6 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(594)
#    Time: 130845 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 594
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# ** Error: tb/tb_ip_TIMER.sv(424): 'upcount_forkjoin' already exists; must not be redefined as a task.
# ** Error: tb/tb_ip_TIMER.sv(529): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(533): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(552): Illegal declaration after the statement near line '538'.  Declarations must precede statements.  Look for stray semicolons.
# ** Error: tb/tb_ip_TIMER.sv(561): near "endcase": syntax error, unexpected endcase
# ** Error: tb/tb_ip_TIMER.sv(570): (vlog-2730) Undefined variable: 'dec_needed'.
# 
# ** Error: tb/tb_ip_TIMER.sv(571): (vlog-2730) Undefined variable: 'pclk_cycles_to_udf'.
# 
# ** Error: tb/tb_ip_TIMER.sv(584): 'mon1' already exists; must not be redefined as a named block
# ** Error: tb/tb_ip_TIMER.sv(622): 'mon2' already exists; must not be redefined as a named block
# ** Error: tb/tb_ip_TIMER.sv(643): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(647): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(711): near "endmodule": syntax error, unexpected endmodule
# C:/questasim64_10.2c/win64/vlog failed.
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# ** Error: tb/tb_ip_TIMER.sv(424): 'upcount_forkjoin' already exists; must not be redefined as a task.
# ** Error: tb/tb_ip_TIMER.sv(529): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(533): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(552): Illegal declaration after the statement near line '538'.  Declarations must precede statements.  Look for stray semicolons.
# ** Error: tb/tb_ip_TIMER.sv(561): near "endcase": syntax error, unexpected endcase
# ** Error: tb/tb_ip_TIMER.sv(570): (vlog-2730) Undefined variable: 'dec_needed'.
# 
# ** Error: tb/tb_ip_TIMER.sv(571): (vlog-2730) Undefined variable: 'pclk_cycles_to_udf'.
# 
# ** Error: tb/tb_ip_TIMER.sv(584): 'mon1' already exists; must not be redefined as a named block
# ** Error: tb/tb_ip_TIMER.sv(622): 'mon2' already exists; must not be redefined as a named block
# ** Error: tb/tb_ip_TIMER.sv(643): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(647): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(711): near "endmodule": syntax error, unexpected endmodule
# C:/questasim64_10.2c/win64/vlog failed.
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'hFD | Curent count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xdd ===
#   inc_needed=291, pclk_cycles_to_ovf=582, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 55925000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xe3
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x2e ===
#   inc_needed=210, pclk_cycles_to_ovf=840, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=1 Thread1: PASS - OVF observed at time 69025000 (after 838 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x45 ===
#   inc_needed=187, pclk_cycles_to_ovf=1496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 84145000 (after 1492 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xb6 ===
#   inc_needed=330, pclk_cycles_to_ovf=5280, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xe3
# CKS=3 Thread1: PASS - OVF observed at time 124865000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 125105000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 127435000 (after 124 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 130555000 (after 262 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 130845000, Total errors: 6 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(594)
#    Time: 130845 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 594
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# ** Error: tb/tb_ip_TIMER.sv(643): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(647): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(666): Illegal declaration after the statement near line '652'.  Declarations must precede statements.  Look for stray semicolons.
# ** Error: tb/tb_ip_TIMER.sv(675): near "endcase": syntax error, unexpected endcase
# ** Error: tb/tb_ip_TIMER.sv(684): (vlog-2730) Undefined variable: 'dec_needed'.
# 
# ** Error: tb/tb_ip_TIMER.sv(685): (vlog-2730) Undefined variable: 'pclk_cycles_to_udf'.
# 
# ** Error: tb/tb_ip_TIMER.sv(698): 'mon1' already exists; must not be redefined as a named block
# ** Error: tb/tb_ip_TIMER.sv(736): 'mon2' already exists; must not be redefined as a named block
# ** Error: tb/tb_ip_TIMER.sv(757): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(761): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(825): near "endmodule": syntax error, unexpected endmodule
# C:/questasim64_10.2c/win64/vlog failed.
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# ** Error: tb/tb_ip_TIMER.sv(644): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(649): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(760): near "}": syntax error, unexpected '}'
# ** Error: tb/tb_ip_TIMER.sv(765): near "endtask": syntax error, unexpected endtask
# ** Error: tb/tb_ip_TIMER.sv(829): near "endmodule": syntax error, unexpected endmodule
# C:/questasim64_10.2c/win64/vlog failed.
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x47
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf7
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 60755000 (after 320 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 75835000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xb, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 77855000 (after 21 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xdd
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 79955000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 84415000, Total errors: 10 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(608)
#    Time: 84415 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 608
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xdd ===
#   inc_needed=291, pclk_cycles_to_ovf=582, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 55925000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xe3
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x2e ===
#   inc_needed=210, pclk_cycles_to_ovf=840, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=1 Thread1: PASS - OVF observed at time 69025000 (after 838 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x45 ===
#   inc_needed=187, pclk_cycles_to_ovf=1496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 84145000 (after 1492 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xb6 ===
#   inc_needed=330, pclk_cycles_to_ovf=5280, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xe3
# CKS=3 Thread1: PASS - OVF observed at time 124865000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 125105000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 127435000 (after 124 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 130555000 (after 262 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 130845000, Total errors: 6 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(586)
#    Time: 130845 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 586
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# ** Error: (vsim-8220) tb/tb_ip_TIMER.sv(176): This or another usage of 'u_ip_timer.u_rw_reg_control.TMR_OVF' inconsistent with 'net' object.
# 
#         Region: /tb_ip_TIMER
# ** Error: (vsim-8220) tb/tb_ip_TIMER.sv(189): This or another usage of 'u_ip_timer.u_rw_reg_control.TMR_UDF' inconsistent with 'net' object.
# 
#         Region: /tb_ip_TIMER
# Error loading design
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 FAIL: OVF flag not set
# TC3-3 PASS: OVF cleared by SW
# TC3-4 FAIL: UDF flag not set
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# === Test finished at 5795000, Total errors: 0 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(340)
#    Time: 5795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 340
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 FAIL: OVF flag not set
# TC3-3 PASS: OVF cleared by SW
# TC3-4 FAIL: UDF flag not set
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# === Test finished at 5795000, Total errors: 0 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(340)
#    Time: 5795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 340
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 FAIL: OVF flag not set
# TC3-3 PASS: OVF cleared by SW
# TC3-4 FAIL: UDF flag not set
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# === Test finished at 5795000, Total errors: 0 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(340)
#    Time: 5795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 340
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 PASS: OVF flag set by HW
# TC3-3 FAIL: OVF not cleared
# TC3-4 PASS: UDF flag set by HW
# TC3-4 FAIL: UDF not cleared
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# === Test finished at 5795000, Total errors: 0 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(342)
#    Time: 5795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 342
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 PASS: OVF flag set by HW
# TC3-3 PASS: OVF cleared by SW
# TC3-4 PASS: UDF flag set by HW
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# === Test finished at 5795000, Total errors: 0 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(345)
#    Time: 5795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 345
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 PASS: OVF flag set by HW
# TC3-3 PASS: OVF cleared by SW
# TC3-4 PASS: UDF flag set by HW
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xea ===
#   inc_needed=278, pclk_cycles_to_ovf=556, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 14965000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xdb
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x53 ===
#   inc_needed=173, pclk_cycles_to_ovf=692, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xd8
# CKS=1 Thread1: PASS - OVF observed at time 26425000 (after 691 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xc8 ===
#   inc_needed=312, pclk_cycles_to_ovf=2496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xdd
# CKS=2 Thread1: PASS - OVF observed at time 46705000 (after 2008 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xa5 ===
#   inc_needed=347, pclk_cycles_to_ovf=5552, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xee
# CKS=3 Thread1: PASS - OVF observed at time 87425000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x7d (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=125, pclk_cycles_to_udf=250, margin=100, th2_wait=233
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 87665000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0x88
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x79 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=121, pclk_cycles_to_udf=484, margin=100, th2_wait=389
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x16
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 95075000 (after 483 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdd (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-35, pclk_cycles_to_udf=-280, margin=100, th2_wait=-120
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-35 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x65 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=101, pclk_cycles_to_udf=1616, margin=100, th2_wait=1144
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1d
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 111755000 (after 1619 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 111795000, Total errors: 5 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(620)
#    Time: 111795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 620
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 PASS: OVF flag set by HW
# TC3-3 PASS: OVF cleared by SW
# TC3-4 PASS: UDF flag set by HW
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xea ===
#   inc_needed=278, pclk_cycles_to_ovf=556, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 14965000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xdb
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x53 ===
#   inc_needed=173, pclk_cycles_to_ovf=692, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xd8
# CKS=1 Thread1: PASS - OVF observed at time 26425000 (after 691 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xc8 ===
#   inc_needed=312, pclk_cycles_to_ovf=2496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xdd
# CKS=2 Thread1: PASS - OVF observed at time 46705000 (after 2008 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xa5 ===
#   inc_needed=347, pclk_cycles_to_ovf=5552, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xee
# CKS=3 Thread1: PASS - OVF observed at time 87425000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x7d (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=125, pclk_cycles_to_udf=250, margin=100, th2_wait=233
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 87665000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0x88
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x79 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=121, pclk_cycles_to_udf=484, margin=100, th2_wait=389
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x16
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 95075000 (after 483 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdd (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-35, pclk_cycles_to_udf=-280, margin=100, th2_wait=-120
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-35 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x65 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=101, pclk_cycles_to_udf=1616, margin=100, th2_wait=1144
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1d
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 111755000 (after 1619 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 111795000, Total errors: 5 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(620)
#    Time: 111795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 620
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-2 PASS: TSR ignores SW write (readback = 0)
# TC3-3 PASS: OVF flag set by HW
# TC3-3 PASS: OVF cleared by SW
# TC3-4 PASS: UDF flag set by HW
# TC3-4 PASS: UDF cleared by SW
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x85 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb8 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# => Writing random data 0x28 to invalid address 0xca...
# TC6 PASS: Write to invalid addr 0xca failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xea ===
#   inc_needed=278, pclk_cycles_to_ovf=556, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 14965000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xdb
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x53 ===
#   inc_needed=173, pclk_cycles_to_ovf=692, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xd8
# CKS=1 Thread1: PASS - OVF observed at time 26425000 (after 691 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xc8 ===
#   inc_needed=312, pclk_cycles_to_ovf=2496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xdd
# CKS=2 Thread1: PASS - OVF observed at time 46705000 (after 2008 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xa5 ===
#   inc_needed=347, pclk_cycles_to_ovf=5552, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xee
# CKS=3 Thread1: PASS - OVF observed at time 87425000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x7d (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=125, pclk_cycles_to_udf=250, margin=100, th2_wait=233
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 87665000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0x88
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x79 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=121, pclk_cycles_to_udf=484, margin=100, th2_wait=389
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x16
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 95075000 (after 483 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xdd (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=-35, pclk_cycles_to_udf=-280, margin=100, th2_wait=-120
# CKS=10 Thread1 TIMEOUT: TCNT=0x0, TCR=0x32, steps=-35 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x32
# CKS=2: FAIL (th1=0 th2=1) err_cnt=1
# 
# === TEST for CKS=3, start=0x65 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=101, pclk_cycles_to_udf=1616, margin=100, th2_wait=1144
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1d
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 111755000 (after 1619 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 111795000, Total errors: 5 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(620)
#    Time: 111795 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 620
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xdd ===
#   inc_needed=291, pclk_cycles_to_ovf=582, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 55925000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xe3
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x2e ===
#   inc_needed=210, pclk_cycles_to_ovf=840, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=1 Thread1: PASS - OVF observed at time 69025000 (after 838 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x45 ===
#   inc_needed=187, pclk_cycles_to_ovf=1496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 84145000 (after 1492 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xb6 ===
#   inc_needed=330, pclk_cycles_to_ovf=5280, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xe3
# CKS=3 Thread1: PASS - OVF observed at time 124865000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 125105000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 127435000 (after 124 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 130555000 (after 262 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 130845000, Total errors: 6 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(586)
#    Time: 130845 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 586
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xdd ===
#   inc_needed=291, pclk_cycles_to_ovf=582, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 55925000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xe3
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x2e ===
#   inc_needed=210, pclk_cycles_to_ovf=840, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=1 Thread1: PASS - OVF observed at time 69025000 (after 838 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x45 ===
#   inc_needed=187, pclk_cycles_to_ovf=1496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 84145000 (after 1492 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xb6 ===
#   inc_needed=330, pclk_cycles_to_ovf=5280, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xe3
# CKS=3 Thread1: PASS - OVF observed at time 124865000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 125105000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 127435000 (after 124 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 130555000 (after 262 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 130845000, Total errors: 6 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(586)
#    Time: 130845 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 586
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xdd ===
#   inc_needed=291, pclk_cycles_to_ovf=582, margin=100
# CKS=0 Thread1: PASS - OVF observed at time 55925000 (after 4 cycles), TCNT=0x1
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xe3
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x2e ===
#   inc_needed=210, pclk_cycles_to_ovf=840, margin=100
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=1 Thread1: PASS - OVF observed at time 69025000 (after 838 cycles), TCNT=0x0
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x45 ===
#   inc_needed=187, pclk_cycles_to_ovf=1496, margin=100
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 84145000 (after 1492 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xb6 ===
#   inc_needed=330, pclk_cycles_to_ovf=5280, margin=100
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xe3
# CKS=3 Thread1: PASS - OVF observed at time 124865000 (after 4052 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 125105000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 127435000 (after 124 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x1
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 130555000 (after 262 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=-49, pclk_cycles_to_udf=-784, margin=100, th2_wait=-456
# CKS=11 Thread1 TIMEOUT: TCNT=0x0, TCR=0x33, steps=-49 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x33
# CKS=3: FAIL (th1=0 th2=1) err_cnt=1
# 
# === Test finished at 130845000, Total errors: 6 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(586)
#    Time: 130845 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 586
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(648)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 648
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(648)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 648
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# ** Error: TMR_OVF is undefined or X at time 0!
#    Time: 0 ps  Scope: tb_ip_TIMER File: tb/tb_ip_TIMER.sv Line: 99
# ** Error: TMR_UDF is undefined or X at time 0!
#    Time: 0 ps  Scope: tb_ip_TIMER File: tb/tb_ip_TIMER.sv Line: 100
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xe7 correctly
# TC1-2 PASS: Wrote and read 0x7c correctly
# TC1-2 PASS: Wrote and read 0x9c correctly
# TC1-2 PASS: Wrote and read 0x1c correctly
# TC1-2 PASS: Wrote and read 0xe8 correctly
# TC1-2 PASS: Wrote and read 0xa7 correctly
# TC1-2 PASS: Wrote and read 0x16 correctly
# TC1-2 PASS: Wrote and read 0xc4 correctly
# TC1-2 PASS: Wrote and read 0x00 correctly
# TC1-2 PASS: Wrote and read 0x59 correctly
# TC1-2 PASS: Wrote and read 0xf8 correctly
# TC1-2 PASS: Wrote and read 0xfb correctly
# TC1-2 PASS: Wrote and read 0x11 correctly
# TC1-2 PASS: Wrote and read 0xa2 correctly
# TC1-2 PASS: Wrote and read 0xfc correctly
# TC1-2 PASS: Wrote and read 0xa5 correctly
# TC1-2 PASS: Wrote and read 0xde correctly
# TC1-2 PASS: Wrote and read 0x96 correctly
# TC1-2 PASS: Wrote and read 0x90 correctly
# TC1-2 PASS: Wrote and read 0x17 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xde, read back masked value 0x92 as expected.
# TC2-2 PASS: Wrote 0x83, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x86, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x14, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0xcd, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0x5c, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x4f, read back masked value 0x03 as expected.
# TC2-2 PASS: Wrote 0xb2, read back masked value 0xb2 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# TC2-2 PASS: Wrote 0xff, read back masked value 0xb3 as expected.
# TC2-2 PASS: Wrote 0x1e, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xac, read back masked value 0xa0 as expected.
# TC2-2 PASS: Wrote 0x2c, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe4, read back masked value 0xa0 as expected.
# TC2-2 PASS: Wrote 0x9e, read back masked value 0x92 as expected.
# TC2-2 PASS: Wrote 0x85, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb2, read back masked value 0xb2 as expected.
# TC2-2 PASS: Wrote 0x9b, read back masked value 0x93 as expected.
# TC2-2 PASS: Wrote 0x52, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xad, read back masked value 0xa1 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x82 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x17 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa2 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xc1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x73 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x27 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x0e (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x7f (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x9e (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xcd (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa8 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa3 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x77 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x1f (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbd (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa6 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x5d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa9 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf3 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x63 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x3f to invalid address 0xd4...
# TC6 PASS: Write to invalid addr 0xd4 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xa3...
# TC6 PASS: Write to invalid addr 0xa3 failed as expected (PSLVERR = 1).
# => Writing random data 0x7d to invalid address 0x59...
# TC6 PASS: Write to invalid addr 0x59 failed as expected (PSLVERR = 1).
# => Writing random data 0x18 to invalid address 0x4e...
# TC6 PASS: Write to invalid addr 0x4e failed as expected (PSLVERR = 1).
# => Writing random data 0xe2 to invalid address 0xba...
# TC6 PASS: Write to invalid addr 0xba failed as expected (PSLVERR = 1).
# => Writing random data 0x33 to invalid address 0xdb...
# TC6 PASS: Write to invalid addr 0xdb failed as expected (PSLVERR = 1).
# => Writing random data 0xfc to invalid address 0x13...
# TC6 PASS: Write to invalid addr 0x13 failed as expected (PSLVERR = 1).
# => Writing random data 0xbd to invalid address 0x71...
# TC6 PASS: Write to invalid addr 0x71 failed as expected (PSLVERR = 1).
# => Writing random data 0x89 to invalid address 0x82...
# TC6 PASS: Write to invalid addr 0x82 failed as expected (PSLVERR = 1).
# => Writing random data 0x81 to invalid address 0x29...
# TC6 PASS: Write to invalid addr 0x29 failed as expected (PSLVERR = 1).
# => Writing random data 0xad to invalid address 0x5e...
# TC6 PASS: Write to invalid addr 0x5e failed as expected (PSLVERR = 1).
# => Writing random data 0x94 to invalid address 0x57...
# TC6 PASS: Write to invalid addr 0x57 failed as expected (PSLVERR = 1).
# => Writing random data 0x7d to invalid address 0xa8...
# TC6 PASS: Write to invalid addr 0xa8 failed as expected (PSLVERR = 1).
# => Writing random data 0xa8 to invalid address 0x74...
# TC6 PASS: Write to invalid addr 0x74 failed as expected (PSLVERR = 1).
# => Writing random data 0xaf to invalid address 0x4a...
# TC6 PASS: Write to invalid addr 0x4a failed as expected (PSLVERR = 1).
# => Writing random data 0x4d to invalid address 0x59...
# TC6 PASS: Write to invalid addr 0x59 failed as expected (PSLVERR = 1).
# => Writing random data 0x1e to invalid address 0xa1...
# TC6 PASS: Write to invalid addr 0xa1 failed as expected (PSLVERR = 1).
# => Writing random data 0xfe to invalid address 0x1c...
# TC6 PASS: Write to invalid addr 0x1c failed as expected (PSLVERR = 1).
# => Writing random data 0x25 to invalid address 0x48...
# TC6 PASS: Write to invalid addr 0x48 failed as expected (PSLVERR = 1).
# => Writing random data 0x49 to invalid address 0x6a...
# TC6 PASS: Write to invalid addr 0x6a failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0x0 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=256, pclk_cycles_to_ovf=512, margin=184, th2_wait=464
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 74655000 (after 0 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xea (cycle 0)
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xee (cycle 1)
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xee
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xff (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=257, pclk_cycles_to_ovf=514, margin=129, th2_wait=428
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x4 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 79595000 (after 0 cycles), TCNT=0x4
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xda (cycle 0)
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xde (cycle 1)
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xde
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x70 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=144, pclk_cycles_to_ovf=288, margin=85, th2_wait=248
# CKS=0 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf3
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 87035000 (after 280 cycles), TCNT=0x2
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x0 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=256, pclk_cycles_to_ovf=1024, margin=167, th2_wait=794
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc9
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 97515000 (after 1017 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xff (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=257, pclk_cycles_to_ovf=1028, margin=132, th2_wait=773
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 97725000 (after 0 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xc2 (cycle 0)
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xc4 (cycle 1)
# CKS=1 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xc4
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xcb (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=309, pclk_cycles_to_ovf=1236, margin=92, th2_wait=885
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 107955000 (after 220 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa7 (cycle 0)
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa9 (cycle 1)
# CKS=1 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xa9
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x0 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=256, pclk_cycles_to_ovf=2048, margin=50, th2_wait=1398
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb1
# CKS=2 Thread1: PASS - OVF observed at time 135355000 (after 2035 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xff (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=257, pclk_cycles_to_ovf=2056, margin=108, th2_wait=1442
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 135595000 (after 3 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb4 (cycle 0)
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb5 (cycle 1)
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xb5
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xa4 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=348, pclk_cycles_to_ovf=2784, margin=81, th2_wait=1910
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 157595000 (after 731 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x94 (cycle 0)
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x94 (cycle 1)
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x94
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x0 (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=256, pclk_cycles_to_ovf=4096, margin=137, th2_wait=2822
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb1
# CKS=3 Thread1: PASS - OVF observed at time 210635000 (after 4085 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xff (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=257, pclk_cycles_to_ovf=4112, margin=187, th2_wait=2866
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread1: PASS - OVF observed at time 210955000 (after 11 cycles), TCNT=0x0
# CKS=3 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb2 (cycle 0)
# CKS=3 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb3 (cycle 1)
# CKS=3 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xb3
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x62 (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=158, pclk_cycles_to_ovf=2528, margin=62, th2_wait=1726
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xce
# CKS=3 Thread1: PASS - OVF observed at time 265035000 (after 2517 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x0 (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=1, pclk_cycles_to_udf=2, margin=124, th2_wait=84
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 265285000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2 (cycle 0)
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xcf (cycle 1)
# CKS=0 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xcf
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xff (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=255, pclk_cycles_to_udf=510, margin=74, th2_wait=389
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 271515000 (after 503 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x33 (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=51, pclk_cycles_to_udf=102, margin=117, th2_wait=146
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 272715000 (after 99 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xe5 (cycle 0)
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xe2 (cycle 1)
# CKS=0 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xe2
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x0 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=1, pclk_cycles_to_udf=4, margin=180, th2_wait=122
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 273525000 (after 0 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xdf (cycle 0)
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde (cycle 1)
# CKS=1 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xde
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xff (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=255, pclk_cycles_to_udf=1020, margin=64, th2_wait=722
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x48
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 285275000 (after 1017 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x52 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=82, pclk_cycles_to_udf=328, margin=118, th2_wait=297
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x5
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 288795000 (after 325 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x0 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=1, pclk_cycles_to_udf=8, margin=64, th2_wait=48
# ERROR: CLK_IN[2] not toggling!
# WARNING: CLK_IN[2] unstable after glitch!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf3
# CKS=10 Thread1 TIMEOUT: TCNT=0xf0, TCR=0x32, steps=1 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=3
# 
# === TEST for CKS=2, start=0xff (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=255, pclk_cycles_to_udf=2040, margin=174, th2_wait=1476
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x45
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 310475000 (after 2037 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xb6 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=182, pclk_cycles_to_udf=1456, margin=164, th2_wait=1080
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x2d
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 325275000 (after 1453 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x0 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=1, pclk_cycles_to_udf=16, margin=138, th2_wait=102
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf5
# CKS=11 Thread1 TIMEOUT: TCNT=0xf2, TCR=0x33, steps=1 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=3
# 
# === TEST for CKS=3, start=0xff (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=255, pclk_cycles_to_udf=4080, margin=85, th2_wait=2776
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x51
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 368235000 (after 4083 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x9f (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=159, pclk_cycles_to_udf=2544, margin=82, th2_wait=1750
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 393995000 (after 2549 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 394035000, Total errors: 64 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(696)
#    Time: 394035 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 696
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# ** Error: TMR_OVF is undefined or X at time 0!
#    Time: 0 ps  Scope: tb_ip_TIMER File: tb/tb_ip_TIMER.sv Line: 99
# ** Error: TMR_UDF is undefined or X at time 0!
#    Time: 0 ps  Scope: tb_ip_TIMER File: tb/tb_ip_TIMER.sv Line: 100
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xe7 correctly
# TC1-2 PASS: Wrote and read 0x7c correctly
# TC1-2 PASS: Wrote and read 0x9c correctly
# TC1-2 PASS: Wrote and read 0x1c correctly
# TC1-2 PASS: Wrote and read 0xe8 correctly
# TC1-2 PASS: Wrote and read 0xa7 correctly
# TC1-2 PASS: Wrote and read 0x16 correctly
# TC1-2 PASS: Wrote and read 0xc4 correctly
# TC1-2 PASS: Wrote and read 0x00 correctly
# TC1-2 PASS: Wrote and read 0x59 correctly
# TC1-2 PASS: Wrote and read 0xf8 correctly
# TC1-2 PASS: Wrote and read 0xfb correctly
# TC1-2 PASS: Wrote and read 0x11 correctly
# TC1-2 PASS: Wrote and read 0xa2 correctly
# TC1-2 PASS: Wrote and read 0xfc correctly
# TC1-2 PASS: Wrote and read 0xa5 correctly
# TC1-2 PASS: Wrote and read 0xde correctly
# TC1-2 PASS: Wrote and read 0x96 correctly
# TC1-2 PASS: Wrote and read 0x90 correctly
# TC1-2 PASS: Wrote and read 0x17 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xde, read back masked value 0x92 as expected.
# TC2-2 PASS: Wrote 0x83, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x86, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x14, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0xcd, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0x5c, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x4f, read back masked value 0x03 as expected.
# TC2-2 PASS: Wrote 0xb2, read back masked value 0xb2 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# TC2-2 PASS: Wrote 0xff, read back masked value 0xb3 as expected.
# TC2-2 PASS: Wrote 0x1e, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xac, read back masked value 0xa0 as expected.
# TC2-2 PASS: Wrote 0x2c, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe4, read back masked value 0xa0 as expected.
# TC2-2 PASS: Wrote 0x9e, read back masked value 0x92 as expected.
# TC2-2 PASS: Wrote 0x85, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb2, read back masked value 0xb2 as expected.
# TC2-2 PASS: Wrote 0x9b, read back masked value 0x93 as expected.
# TC2-2 PASS: Wrote 0x52, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xad, read back masked value 0xa1 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x82 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x17 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa2 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xc1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x73 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x27 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x0e (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x7f (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x9e (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xcd (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa8 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa3 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x77 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x1f (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbd (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa6 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x5d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa9 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf3 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x63 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x3f to invalid address 0xd4...
# TC6 PASS: Write to invalid addr 0xd4 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xa3...
# TC6 PASS: Write to invalid addr 0xa3 failed as expected (PSLVERR = 1).
# => Writing random data 0x7d to invalid address 0x59...
# TC6 PASS: Write to invalid addr 0x59 failed as expected (PSLVERR = 1).
# => Writing random data 0x18 to invalid address 0x4e...
# TC6 PASS: Write to invalid addr 0x4e failed as expected (PSLVERR = 1).
# => Writing random data 0xe2 to invalid address 0xba...
# TC6 PASS: Write to invalid addr 0xba failed as expected (PSLVERR = 1).
# => Writing random data 0x33 to invalid address 0xdb...
# TC6 PASS: Write to invalid addr 0xdb failed as expected (PSLVERR = 1).
# => Writing random data 0xfc to invalid address 0x13...
# TC6 PASS: Write to invalid addr 0x13 failed as expected (PSLVERR = 1).
# => Writing random data 0xbd to invalid address 0x71...
# TC6 PASS: Write to invalid addr 0x71 failed as expected (PSLVERR = 1).
# => Writing random data 0x89 to invalid address 0x82...
# TC6 PASS: Write to invalid addr 0x82 failed as expected (PSLVERR = 1).
# => Writing random data 0x81 to invalid address 0x29...
# TC6 PASS: Write to invalid addr 0x29 failed as expected (PSLVERR = 1).
# => Writing random data 0xad to invalid address 0x5e...
# TC6 PASS: Write to invalid addr 0x5e failed as expected (PSLVERR = 1).
# => Writing random data 0x94 to invalid address 0x57...
# TC6 PASS: Write to invalid addr 0x57 failed as expected (PSLVERR = 1).
# => Writing random data 0x7d to invalid address 0xa8...
# TC6 PASS: Write to invalid addr 0xa8 failed as expected (PSLVERR = 1).
# => Writing random data 0xa8 to invalid address 0x74...
# TC6 PASS: Write to invalid addr 0x74 failed as expected (PSLVERR = 1).
# => Writing random data 0xaf to invalid address 0x4a...
# TC6 PASS: Write to invalid addr 0x4a failed as expected (PSLVERR = 1).
# => Writing random data 0x4d to invalid address 0x59...
# TC6 PASS: Write to invalid addr 0x59 failed as expected (PSLVERR = 1).
# => Writing random data 0x1e to invalid address 0xa1...
# TC6 PASS: Write to invalid addr 0xa1 failed as expected (PSLVERR = 1).
# => Writing random data 0xfe to invalid address 0x1c...
# TC6 PASS: Write to invalid addr 0x1c failed as expected (PSLVERR = 1).
# => Writing random data 0x25 to invalid address 0x48...
# TC6 PASS: Write to invalid addr 0x48 failed as expected (PSLVERR = 1).
# => Writing random data 0x49 to invalid address 0x6a...
# TC6 PASS: Write to invalid addr 0x6a failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0x0 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=256, pclk_cycles_to_ovf=512, margin=184, th2_wait=464
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 74655000 (after 0 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xea (cycle 0)
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xee (cycle 1)
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xee
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xff (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=257, pclk_cycles_to_ovf=514, margin=129, th2_wait=428
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x4 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 79595000 (after 0 cycles), TCNT=0x4
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xda (cycle 0)
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xde (cycle 1)
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xde
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x70 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=144, pclk_cycles_to_ovf=288, margin=85, th2_wait=248
# CKS=0 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf3
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 87035000 (after 280 cycles), TCNT=0x2
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x0 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=256, pclk_cycles_to_ovf=1024, margin=167, th2_wait=794
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc9
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 97515000 (after 1017 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xff (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=257, pclk_cycles_to_ovf=1028, margin=132, th2_wait=773
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 97725000 (after 0 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xc2 (cycle 0)
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xc4 (cycle 1)
# CKS=1 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xc4
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xcb (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=309, pclk_cycles_to_ovf=1236, margin=92, th2_wait=885
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 107955000 (after 220 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa7 (cycle 0)
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa9 (cycle 1)
# CKS=1 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xa9
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x0 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=256, pclk_cycles_to_ovf=2048, margin=50, th2_wait=1398
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb1
# CKS=2 Thread1: PASS - OVF observed at time 135355000 (after 2035 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xff (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=257, pclk_cycles_to_ovf=2056, margin=108, th2_wait=1442
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 135595000 (after 3 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb4 (cycle 0)
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb5 (cycle 1)
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xb5
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xa4 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=348, pclk_cycles_to_ovf=2784, margin=81, th2_wait=1910
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 157595000 (after 731 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x94 (cycle 0)
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x94 (cycle 1)
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x94
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x0 (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=256, pclk_cycles_to_ovf=4096, margin=137, th2_wait=2822
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb1
# CKS=3 Thread1: PASS - OVF observed at time 210635000 (after 4085 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xff (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=257, pclk_cycles_to_ovf=4112, margin=187, th2_wait=2866
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread1: PASS - OVF observed at time 210955000 (after 11 cycles), TCNT=0x0
# CKS=3 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb2 (cycle 0)
# CKS=3 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb3 (cycle 1)
# CKS=3 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xb3
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x62 (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=158, pclk_cycles_to_ovf=2528, margin=62, th2_wait=1726
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xce
# CKS=3 Thread1: PASS - OVF observed at time 265035000 (after 2517 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x0 (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=1, pclk_cycles_to_udf=2, margin=124, th2_wait=84
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 265285000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2 (cycle 0)
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xcf (cycle 1)
# CKS=0 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xcf
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xff (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=255, pclk_cycles_to_udf=510, margin=74, th2_wait=389
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 271515000 (after 503 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x33 (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=51, pclk_cycles_to_udf=102, margin=117, th2_wait=146
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 272715000 (after 99 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xe5 (cycle 0)
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xe2 (cycle 1)
# CKS=0 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xe2
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x0 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=1, pclk_cycles_to_udf=4, margin=180, th2_wait=122
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 273525000 (after 0 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xdf (cycle 0)
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde (cycle 1)
# CKS=1 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xde
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xff (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=255, pclk_cycles_to_udf=1020, margin=64, th2_wait=722
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x48
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 285275000 (after 1017 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x52 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=82, pclk_cycles_to_udf=328, margin=118, th2_wait=297
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x5
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 288795000 (after 325 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x0 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=1, pclk_cycles_to_udf=8, margin=64, th2_wait=48
# ERROR: CLK_IN[2] not toggling!
# WARNING: CLK_IN[2] unstable after glitch!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf3
# CKS=10 Thread1 TIMEOUT: TCNT=0xf0, TCR=0x32, steps=1 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=3
# 
# === TEST for CKS=2, start=0xff (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=255, pclk_cycles_to_udf=2040, margin=174, th2_wait=1476
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x45
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 310475000 (after 2037 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xb6 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=182, pclk_cycles_to_udf=1456, margin=164, th2_wait=1080
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x2d
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 325275000 (after 1453 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x0 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=1, pclk_cycles_to_udf=16, margin=138, th2_wait=102
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf5
# CKS=11 Thread1 TIMEOUT: TCNT=0xf2, TCR=0x33, steps=1 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=3
# 
# === TEST for CKS=3, start=0xff (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=255, pclk_cycles_to_udf=4080, margin=85, th2_wait=2776
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x51
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 368235000 (after 4083 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x9f (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=159, pclk_cycles_to_udf=2544, margin=82, th2_wait=1750
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 393995000 (after 2549 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 394035000, Total errors: 64 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(696)
#    Time: 394035 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 696
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# ** Error: TMR_OVF is undefined or X at time 0!
#    Time: 0 ps  Scope: tb_ip_TIMER File: tb/tb_ip_TIMER.sv Line: 99
# ** Error: TMR_UDF is undefined or X at time 0!
#    Time: 0 ps  Scope: tb_ip_TIMER File: tb/tb_ip_TIMER.sv Line: 100
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xe7 correctly
# TC1-2 PASS: Wrote and read 0x7c correctly
# TC1-2 PASS: Wrote and read 0x9c correctly
# TC1-2 PASS: Wrote and read 0x1c correctly
# TC1-2 PASS: Wrote and read 0xe8 correctly
# TC1-2 PASS: Wrote and read 0xa7 correctly
# TC1-2 PASS: Wrote and read 0x16 correctly
# TC1-2 PASS: Wrote and read 0xc4 correctly
# TC1-2 PASS: Wrote and read 0x00 correctly
# TC1-2 PASS: Wrote and read 0x59 correctly
# TC1-2 PASS: Wrote and read 0xf8 correctly
# TC1-2 PASS: Wrote and read 0xfb correctly
# TC1-2 PASS: Wrote and read 0x11 correctly
# TC1-2 PASS: Wrote and read 0xa2 correctly
# TC1-2 PASS: Wrote and read 0xfc correctly
# TC1-2 PASS: Wrote and read 0xa5 correctly
# TC1-2 PASS: Wrote and read 0xde correctly
# TC1-2 PASS: Wrote and read 0x96 correctly
# TC1-2 PASS: Wrote and read 0x90 correctly
# TC1-2 PASS: Wrote and read 0x17 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xde, read back masked value 0x92 as expected.
# TC2-2 PASS: Wrote 0x83, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x86, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x14, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0xcd, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0x5c, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x4f, read back masked value 0x03 as expected.
# TC2-2 PASS: Wrote 0xb2, read back masked value 0xb2 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# TC2-2 PASS: Wrote 0xff, read back masked value 0xb3 as expected.
# TC2-2 PASS: Wrote 0x1e, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xac, read back masked value 0xa0 as expected.
# TC2-2 PASS: Wrote 0x2c, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe4, read back masked value 0xa0 as expected.
# TC2-2 PASS: Wrote 0x9e, read back masked value 0x92 as expected.
# TC2-2 PASS: Wrote 0x85, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb2, read back masked value 0xb2 as expected.
# TC2-2 PASS: Wrote 0x9b, read back masked value 0x93 as expected.
# TC2-2 PASS: Wrote 0x52, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xad, read back masked value 0xa1 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0x82 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x17 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa2 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xc1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x73 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x27 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x0e (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x7f (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x9e (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xcd (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa8 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa3 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x77 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x1f (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xb1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbd (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa6 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x5d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xa9 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf3 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x63 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0x3f to invalid address 0xd4...
# TC6 PASS: Write to invalid addr 0xd4 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xa3...
# TC6 PASS: Write to invalid addr 0xa3 failed as expected (PSLVERR = 1).
# => Writing random data 0x7d to invalid address 0x59...
# TC6 PASS: Write to invalid addr 0x59 failed as expected (PSLVERR = 1).
# => Writing random data 0x18 to invalid address 0x4e...
# TC6 PASS: Write to invalid addr 0x4e failed as expected (PSLVERR = 1).
# => Writing random data 0xe2 to invalid address 0xba...
# TC6 PASS: Write to invalid addr 0xba failed as expected (PSLVERR = 1).
# => Writing random data 0x33 to invalid address 0xdb...
# TC6 PASS: Write to invalid addr 0xdb failed as expected (PSLVERR = 1).
# => Writing random data 0xfc to invalid address 0x13...
# TC6 PASS: Write to invalid addr 0x13 failed as expected (PSLVERR = 1).
# => Writing random data 0xbd to invalid address 0x71...
# TC6 PASS: Write to invalid addr 0x71 failed as expected (PSLVERR = 1).
# => Writing random data 0x89 to invalid address 0x82...
# TC6 PASS: Write to invalid addr 0x82 failed as expected (PSLVERR = 1).
# => Writing random data 0x81 to invalid address 0x29...
# TC6 PASS: Write to invalid addr 0x29 failed as expected (PSLVERR = 1).
# => Writing random data 0xad to invalid address 0x5e...
# TC6 PASS: Write to invalid addr 0x5e failed as expected (PSLVERR = 1).
# => Writing random data 0x94 to invalid address 0x57...
# TC6 PASS: Write to invalid addr 0x57 failed as expected (PSLVERR = 1).
# => Writing random data 0x7d to invalid address 0xa8...
# TC6 PASS: Write to invalid addr 0xa8 failed as expected (PSLVERR = 1).
# => Writing random data 0xa8 to invalid address 0x74...
# TC6 PASS: Write to invalid addr 0x74 failed as expected (PSLVERR = 1).
# => Writing random data 0xaf to invalid address 0x4a...
# TC6 PASS: Write to invalid addr 0x4a failed as expected (PSLVERR = 1).
# => Writing random data 0x4d to invalid address 0x59...
# TC6 PASS: Write to invalid addr 0x59 failed as expected (PSLVERR = 1).
# => Writing random data 0x1e to invalid address 0xa1...
# TC6 PASS: Write to invalid addr 0xa1 failed as expected (PSLVERR = 1).
# => Writing random data 0xfe to invalid address 0x1c...
# TC6 PASS: Write to invalid addr 0x1c failed as expected (PSLVERR = 1).
# => Writing random data 0x25 to invalid address 0x48...
# TC6 PASS: Write to invalid addr 0x48 failed as expected (PSLVERR = 1).
# => Writing random data 0x49 to invalid address 0x6a...
# TC6 PASS: Write to invalid addr 0x6a failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0x0 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=256, pclk_cycles_to_ovf=512, margin=184, th2_wait=464
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 74655000 (after 0 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xea (cycle 0)
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xee (cycle 1)
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xee
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xff (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=257, pclk_cycles_to_ovf=514, margin=129, th2_wait=428
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x4 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 79595000 (after 0 cycles), TCNT=0x4
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xda (cycle 0)
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xde (cycle 1)
# CKS=0 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xde
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x70 (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=144, pclk_cycles_to_ovf=288, margin=85, th2_wait=248
# CKS=0 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf3
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 87035000 (after 280 cycles), TCNT=0x2
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x0 (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=256, pclk_cycles_to_ovf=1024, margin=167, th2_wait=794
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xc9
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 97515000 (after 1017 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xff (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=257, pclk_cycles_to_ovf=1028, margin=132, th2_wait=773
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 97725000 (after 0 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xc2 (cycle 0)
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xc4 (cycle 1)
# CKS=1 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xc4
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xcb (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=309, pclk_cycles_to_ovf=1236, margin=92, th2_wait=885
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 107955000 (after 220 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa7 (cycle 0)
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa9 (cycle 1)
# CKS=1 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xa9
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x0 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=256, pclk_cycles_to_ovf=2048, margin=50, th2_wait=1398
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb1
# CKS=2 Thread1: PASS - OVF observed at time 135355000 (after 2035 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xff (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=257, pclk_cycles_to_ovf=2056, margin=108, th2_wait=1442
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 135595000 (after 3 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb4 (cycle 0)
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb5 (cycle 1)
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xb5
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xa4 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=348, pclk_cycles_to_ovf=2784, margin=81, th2_wait=1910
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 157595000 (after 731 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x94 (cycle 0)
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x94 (cycle 1)
# CKS=2 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0x94
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x0 (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=256, pclk_cycles_to_ovf=4096, margin=137, th2_wait=2822
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb1
# CKS=3 Thread1: PASS - OVF observed at time 210635000 (after 4085 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xff (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=257, pclk_cycles_to_ovf=4112, margin=187, th2_wait=2866
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread1: PASS - OVF observed at time 210955000 (after 11 cycles), TCNT=0x0
# CKS=3 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb2 (cycle 0)
# CKS=3 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xb3 (cycle 1)
# CKS=3 Thread2: PASS - no OVF yet TSR=0x1, TCNT=0xb3
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x62 (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=158, pclk_cycles_to_ovf=2528, margin=62, th2_wait=1726
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xce
# CKS=3 Thread1: PASS - OVF observed at time 265035000 (after 2517 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x0 (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=1, pclk_cycles_to_udf=2, margin=124, th2_wait=84
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 265285000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd2 (cycle 0)
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xcf (cycle 1)
# CKS=0 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xcf
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xff (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=255, pclk_cycles_to_udf=510, margin=74, th2_wait=389
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 271515000 (after 503 cycles), TCNT=0xfd
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0x33 (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=51, pclk_cycles_to_udf=102, margin=117, th2_wait=146
# WARNING: CLK_IN[0] unstable after glitch!
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 272715000 (after 99 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xe5 (cycle 0)
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xe2 (cycle 1)
# CKS=0 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xe2
# CKS=0: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x0 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=1, pclk_cycles_to_udf=4, margin=180, th2_wait=122
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 273525000 (after 0 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xdf (cycle 0)
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde (cycle 1)
# CKS=1 Thread2: PASS - no UDF yet TSR=0x2, TCNT=0xde
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0xff (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=255, pclk_cycles_to_udf=1020, margin=64, th2_wait=722
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x48
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 285275000 (after 1017 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=1, start=0x52 (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=82, pclk_cycles_to_udf=328, margin=118, th2_wait=297
# WARNING: CLK_IN[1] unstable after glitch!
# CKS=1 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x5
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 288795000 (after 325 cycles), TCNT=0xfe
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x0 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=1, pclk_cycles_to_udf=8, margin=64, th2_wait=48
# ERROR: CLK_IN[2] not toggling!
# WARNING: CLK_IN[2] unstable after glitch!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf3
# CKS=10 Thread1 TIMEOUT: TCNT=0xf0, TCR=0x32, steps=1 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=3
# 
# === TEST for CKS=2, start=0xff (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=255, pclk_cycles_to_udf=2040, margin=174, th2_wait=1476
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x45
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 310475000 (after 2037 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0xb6 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=182, pclk_cycles_to_udf=1456, margin=164, th2_wait=1080
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x2d
# CKS=2 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=2 Thread1: PASS - UDF observed at time 325275000 (after 1453 cycles), TCNT=0xff
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x0 (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=1, pclk_cycles_to_udf=16, margin=138, th2_wait=102
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xf5
# CKS=11 Thread1 TIMEOUT: TCNT=0xf2, TCR=0x33, steps=1 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=3
# 
# === TEST for CKS=3, start=0xff (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=255, pclk_cycles_to_udf=4080, margin=85, th2_wait=2776
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x51
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 368235000 (after 4083 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0x9f (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=159, pclk_cycles_to_udf=2544, margin=82, th2_wait=1750
# ERROR: CLK_IN[3] not toggling!
# WARNING: CLK_IN[3] unstable after glitch!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x31
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 393995000 (after 2549 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 394035000, Total errors: 64 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(696)
#    Time: 394035 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 696
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(648)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 648
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1-1 PASS: Default TDR value = 0x00
# TC1-2 PASS: Wrote and read 0xb8 correctly
# TC1-2 PASS: Wrote and read 0x26 correctly
# TC1-2 PASS: Wrote and read 0x66 correctly
# TC1-2 PASS: Wrote and read 0xb6 correctly
# TC1-2 PASS: Wrote and read 0xc6 correctly
# TC1-2 PASS: Wrote and read 0x46 correctly
# TC1-2 PASS: Wrote and read 0x72 correctly
# TC1-2 PASS: Wrote and read 0x2e correctly
# TC1-2 PASS: Wrote and read 0x67 correctly
# TC1-2 PASS: Wrote and read 0x3a correctly
# TC1-2 PASS: Wrote and read 0x6a correctly
# TC1-2 PASS: Wrote and read 0xb4 correctly
# TC1-2 PASS: Wrote and read 0x6f correctly
# TC1-2 PASS: Wrote and read 0x56 correctly
# TC1-2 PASS: Wrote and read 0x35 correctly
# TC1-2 PASS: Wrote and read 0xd4 correctly
# TC1-2 PASS: Wrote and read 0xae correctly
# TC1-2 PASS: Wrote and read 0x7d correctly
# TC1-2 PASS: Wrote and read 0xdb correctly
# TC1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC2-1 PASS: Default TCR value = 0x00
# TC2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC3-1 PASS: Default TSR value = 0x00
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# TC3-2 PASS
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC3-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(648)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 648
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(653)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 653
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(653)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 653
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(293): Failed to find 'TCNT' in hierarchical name '/u_ip_timer/TCNT'.
# 
# Optimization failed
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# Error loading design
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3812) Design is being optimized...
# 
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(405): Failed to find 'u_ovf_udf_comp' in hierarchical name '/u_APB_trans_bus/u_ovf_udf_comp/TMR_OVF'.
# 
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(443): Failed to find 'u_ovf_udf_comp' in hierarchical name '/u_APB_trans_bus/u_ovf_udf_comp/TMR_UDF'.
# 
# Optimization failed
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# Error loading design
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3812) Design is being optimized...
# 
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# ** Note: (vopt-143) Recognized 1 FSM in module "APB_trans(fast)".
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1 PASS: TMR_OVF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2 PASS: TMR_UDF flag is set exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 55935000 (after 1 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf2
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 64155000 (after 318 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread1: PASS - OVF observed at time 77995000 (after 712 cycles), TCNT=0x0
# CKS=2 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x2b
# CKS=2: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xde
# CKS=3 Thread1: PASS - OVF observed at time 115275000 (after 3357 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 115515000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 117835000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 153515000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 153555000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(653)
#    Time: 153555 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 653
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(315): Failed to find 'u_ovf_udf_comp' in hierarchical name '/u_APB_trans_bus/u_ovf_udf_comp/TMR_OVF'.
# 
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(353): Failed to find 'u_ovf_udf_comp' in hierarchical name '/u_APB_trans_bus/u_ovf_udf_comp/TMR_UDF'.
# 
# Optimization failed
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# Error loading design
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3812) Design is being optimized...
# 
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(315): Failed to find 'TMR_OVF' in hierarchical name '/u_APB_trans_bus/TMR_OVF'.
# 
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(353): Failed to find 'TMR_UDF' in hierarchical name '/u_APB_trans_bus/TMR_UDF'.
# 
# Optimization failed
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# Error loading design
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3812) Design is being optimized...
# 
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# ** Note: (vopt-143) Recognized 1 FSM in module "APB_trans(fast)".
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag cleared
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag cleared
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag cleared
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag cleared
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag cleared
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag cleared
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag cleared
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag cleared
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf0
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 124075000 (after 317 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=2 Thread1: PASS - OVF observed at time 145595000 (after 1479 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb3
# CKS=3 Thread1: PASS - OVF observed at time 186315000 (after 4048 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 186555000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 188875000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 224555000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 224595000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(685)
#    Time: 224595 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 685
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf0
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 124075000 (after 317 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=2 Thread1: PASS - OVF observed at time 145595000 (after 1479 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb3
# CKS=3 Thread1: PASS - OVF observed at time 186315000 (after 4048 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 186555000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 188875000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 224555000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 224595000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(685)
#    Time: 224595 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 685
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf0
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 124075000 (after 317 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=2 Thread1: PASS - OVF observed at time 145595000 (after 1479 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb3
# CKS=3 Thread1: PASS - OVF observed at time 186315000 (after 4048 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 186555000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 188875000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 224555000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 224595000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(685)
#    Time: 224595 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 685
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=310, pclk_cycles_to_ovf=620, margin=100, th2_wait=480
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xf0
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=337, pclk_cycles_to_ovf=1348, margin=100, th2_wait=965
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 124075000 (after 317 cycles), TCNT=0x1
# CKS=1 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0xa3
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcc
# CKS=2 Thread1: PASS - OVF observed at time 145595000 (after 1479 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=258, pclk_cycles_to_ovf=4128, margin=100, th2_wait=2818
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xb3
# CKS=3 Thread1: PASS - OVF observed at time 186315000 (after 4048 cycles), TCNT=0x0
# CKS=3: PASS (th1+th2 ok)
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 186555000 (after 0 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xd3
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 188875000 (after 123 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf8
# CKS=1: FAIL (th1=1 th2=0) err_cnt=3
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd4
# CKS=10 Thread1 TIMEOUT: TCNT=0xc5, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x35
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 224555000 (after 3128 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# === Test finished at 224595000, Total errors: 16 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(685)
#    Time: 224595 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 685
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# ** Error: tb/tb_ip_TIMER.sv(650): (vlog-2163) Macro `PCLK is undefined.
# 
# ** Error: tb/tb_ip_TIMER.sv(650): near ")": syntax error, unexpected ')'
# C:/questasim64_10.2c/win64/vlog failed.
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# ** Error: (vopt-7052) tb/tb_ip_TIMER.sv(649): Failed to find 'pause_counter' in hierarchical name '/u_APB_trans_bus/pause_counter'.
# 
# Optimization failed
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# Error loading design
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3812) Design is being optimized...
# 
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_0.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_1.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_2.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_3.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_4.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_5.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qdb".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-31) Unable to unlink file "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2/_lib3_6.qpg".
# 
# The process cannot access the file because it is being used by another process. (GetLastError() = 32)
# ** Warning: (vopt-133) Unable to remove directory "C:/Users/minht/OneDrive/DOCUME~1/_8_Bit_Timer_22_8_25_testforkjoin/work/@_opt2".
# 
# Access is denied. (GetLastError() = 5)
# ** Note: (vopt-143) Recognized 1 FSM in module "APB_trans(fast)".
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# Initial TCNT = 0xff
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xff, got 0x01
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# Initial TCNT = 0xeb
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xeb, got 0xec
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# Initial TCNT = 0xec
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xec, got 0xed
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# Initial TCNT = 0xed
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xed
# TC2.9: PASS
# 
# === Test finished at 178675000, Total errors: 18 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(741)
#    Time: 178675 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 741
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# Initial TCNT = 0xff
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xff, got 0x01
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# Initial TCNT = 0xec
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xec
# TC2.9: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# Initial TCNT = 0xf4
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xf4
# TC2.9: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# Initial TCNT = 0xf4
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf4, got 0xf5
# TC2.5: FAIL with 1 errors
# 
# === Test finished at 179355000, Total errors: 17 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(741)
#    Time: 179355 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 741
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# Initial TCNT = 0x09
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x09, got 0x0b
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# Initial TCNT = 0xf1
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xf1
# TC2.9: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# Initial TCNT = 0xf6
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf6, got 0xf7
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# Initial TCNT = 0x7c
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x7c, got 0x7d
# TC2.5: FAIL with 1 errors
# 
# === Test finished at 180155000, Total errors: 18 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(742)
#    Time: 180155 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 742
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# Initial TCNT = 0x09
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x09, got 0x0b
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# Initial TCNT = 0xf0
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf0, got 0xf1
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# Initial TCNT = 0xfd
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xfd
# TC2.5-2 PASS
# TC2.9: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# Initial TCNT = 0x02
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x02, got 0x03
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# === Test finished at 181235000, Total errors: 18 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(741)
#    Time: 181235 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 741
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# Initial TCNT = 0x09
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x09, got 0x0b
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# Initial TCNT = 0xf0
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf0, got 0xf1
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# Initial TCNT = 0xfd
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xfd
# TC2.5-2 PASS
# TC2.9: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# Initial TCNT = 0x02
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x02, got 0x03
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# === Test finished at 181235000, Total errors: 18 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(741)
#    Time: 181235 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 741
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# counter before pause = 0x08
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x08, got 0x0a
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# counter before pause = 0xf6
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf6, got 0xf7
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# counter before pause = 0xfd
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xfd
# TC2.5-2 PASS
# TC2.5: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# counter before pause = 0x85
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0x85
# TC2.5-2 PASS
# TC2.5: PASS
# 
# === Test finished at 187285000, Total errors: 17 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(741)
#    Time: 187285 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 741
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# counter before pause = 0x08
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x08, got 0x0a
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# counter before pause = 0xf6
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf6, got 0xf7
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# counter before pause = 0xfd
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xfd
# TC2.5-2 PASS
# TC2.5: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# counter before pause = 0x85
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0x85
# TC2.5-2 PASS
# TC2.5: PASS
# 
# === Test finished at 187285000, Total errors: 17 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(741)
#    Time: 187285 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 741
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# counter before pause = 0x08
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x08, got 0x0a
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# counter before pause = 0xf6
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf6, got 0xf7
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# counter before pause = 0xfd
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xfd
# TC2.5-2 PASS
# TC2.5: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# counter before pause = 0x85
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0x85
# TC2.5-2 PASS
# TC2.5: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[0] ---]
# counter before pause = 0xfa
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xfa, got 0xfc
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[1] ---]
# counter before pause = 0xab
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xab, got 0xac
# TC2.5-2 PASS
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[2] ---]
# counter before pause = 0xd3
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xd3
# TC2.5-2 PASS
# TC2.5: PASS
# 
# [--- TC2.5: Timer Pause/Resume Test with CLK_IN[3] ---]
# counter before pause = 0xc6
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xc6
# TC2.5-2 PASS
# TC2.5: PASS
# 
# === Test finished at 197045000, Total errors: 19 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(749)
#    Time: 197045 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 749
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vlog -coveropt 3 +cover +acc -f compile.f
# QuestaSim-64 vlog 10.2c Compiler 2013.07 Jul 19 2013
# -- Compiling module rw_reg_control
# -- Compiling module rw_read_logic
# -- Compiling module rw_write_logic
# -- Compiling module APB_trans
# -- Compiling module pos_cnt_edge_detect
# -- Compiling module pos_edge_detect_synced
# -- Compiling module clk_sel_synced_alt
# -- Compiling module logic_control
# -- Compiling module cnt_unit
# -- Compiling module ovf_udf_comp
# -- Compiling module ip_TIMER
# -- Compiling module sys_signal
# -- Compiling module cnt_clk_in_gen
# -- Compiling module cnt_sys_signal
# -- Compiling module APB_trans_bus
# -- Compiling module tb_ip_TIMER
# 
# Top level modules:
# 	tb_ip_TIMER
 vsim -coverage -vopt work.tb_ip_TIMER -c -do "run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit"
# vsim -coverage -do {run -all; coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb; quit} -c -vopt work.tb_ip_TIMER 
# ** Note: (vsim-3813) Design is being optimized due to module recompilation...
# 
# Loading sv_std.std
# Loading work.tb_ip_TIMER(fast)
# Loading work.cnt_sys_signal(fast)
# Loading work.sys_signal(fast)
# Loading work.cnt_clk_in_gen(fast)
# Loading work.APB_trans_bus(fast)
# Loading work.ip_TIMER(fast)
# Loading work.rw_reg_control(fast)
# Loading work.APB_trans(fast)
# Loading work.rw_write_logic(fast)
# Loading work.rw_read_logic(fast)
# Loading work.pos_cnt_edge_detect(fast)
# Loading work.clk_sel_synced_alt(fast)
# Loading work.pos_edge_detect_synced(fast)
# Loading work.logic_control(fast)
# Loading work.cnt_unit(fast)
# Loading work.ovf_udf_comp(fast)
# run -all 
# === Reset completed at 15000 ===
# 
# [--- TC1: TDR read/write ---]
# TC1.1-1 PASS: Default TDR value = 0x00
# TC1.1-2 PASS: Wrote and read 0xb8 correctly
# TC1.1-2 PASS: Wrote and read 0x26 correctly
# TC1.1-2 PASS: Wrote and read 0x66 correctly
# TC1.1-2 PASS: Wrote and read 0xb6 correctly
# TC1.1-2 PASS: Wrote and read 0xc6 correctly
# TC1.1-2 PASS: Wrote and read 0x46 correctly
# TC1.1-2 PASS: Wrote and read 0x72 correctly
# TC1.1-2 PASS: Wrote and read 0x2e correctly
# TC1.1-2 PASS: Wrote and read 0x67 correctly
# TC1.1-2 PASS: Wrote and read 0x3a correctly
# TC1.1-2 PASS: Wrote and read 0x6a correctly
# TC1.1-2 PASS: Wrote and read 0xb4 correctly
# TC1.1-2 PASS: Wrote and read 0x6f correctly
# TC1.1-2 PASS: Wrote and read 0x56 correctly
# TC1.1-2 PASS: Wrote and read 0x35 correctly
# TC1.1-2 PASS: Wrote and read 0xd4 correctly
# TC1.1-2 PASS: Wrote and read 0xae correctly
# TC1.1-2 PASS: Wrote and read 0x7d correctly
# TC1.1-2 PASS: Wrote and read 0xdb correctly
# TC1.1-2 PASS: Wrote and read 0x05 correctly
# 
# [--- TC2: TCR read/write mask ---]
# TC1.2-1 PASS: Default TCR value = 0x00
# TC1.2-2 PASS: Wrote 0xe3, read back masked value 0xa3 as expected.
# TC1.2-2 PASS: Wrote 0x20, read back masked value 0x20 as expected.
# TC1.2-2 PASS: Wrote 0xe5, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x05, read back masked value 0x01 as expected.
# TC1.2-2 PASS: Wrote 0x25, read back masked value 0x21 as expected.
# TC1.2-2 PASS: Wrote 0xe9, read back masked value 0xa1 as expected.
# TC1.2-2 PASS: Wrote 0x5d, read back masked value 0x11 as expected.
# TC1.2-2 PASS: Wrote 0x8a, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0x58, read back masked value 0x10 as expected.
# TC1.2-2 PASS: Wrote 0x8b, read back masked value 0x83 as expected.
# TC1.2-2 PASS: Wrote 0x56, read back masked value 0x12 as expected.
# TC1.2-2 PASS: Wrote 0xc9, read back masked value 0x81 as expected.
# TC1.2-2 PASS: Wrote 0xb9, read back masked value 0xb1 as expected.
# TC1.2-2 PASS: Wrote 0x40, read back masked value 0x00 as expected.
# TC1.2-2 PASS: Wrote 0x80, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x0e, read back masked value 0x02 as expected.
# TC1.2-2 PASS: Wrote 0xd4, read back masked value 0x90 as expected.
# TC1.2-2 PASS: Wrote 0x8e, read back masked value 0x82 as expected.
# TC1.2-2 PASS: Wrote 0xc0, read back masked value 0x80 as expected.
# TC1.2-2 PASS: Wrote 0x97, read back masked value 0x93 as expected.
# 
# [--- TC3: TSR read/write ---]
# TC1.3-1 PASS: Default TSR value = 0x00
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# TC1.3-2 PASS: TSR ignores SW write (readback = 0)
# 
# [--- TC4: Testing the TCNT read-only register ---]
# TC1.4-1 PASS: Successfully read from TCNT address (0x03).
# => Attempting to write value 0xf2 to TCNT (0x03)...
# TC1.4-2 PASS: Write to TCNT failed as expected (PSLVERR = 1).
# TC1.4-3 PASS: TCNT value is still 0x05 after attempted write.
# 
# [--- TC5: Null Address ---]
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xd5 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xe0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x99 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x06 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf0 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xbc (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x51 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x45 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x80 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x11 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x3d (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x4c (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x53 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x04 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf7 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xdf (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x17 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0x79 (PSLVERR = 1)
# TC1.5 PASS: PSLVERR asserted for invalid addr = 0xf1 (PSLVERR = 1)
# 
# [--- TC6: Mixed Address ---]
# => Writing random data 0xaf to invalid address 0x60...
# TC1.6 PASS: Write to invalid addr 0x60 failed as expected (PSLVERR = 1).
# => Writing random data 0x45 to invalid address 0x6f...
# TC1.6 PASS: Write to invalid addr 0x6f failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xcd...
# TC1.6 PASS: Write to invalid addr 0xcd failed as expected (PSLVERR = 1).
# => Writing random data 0xa9 to invalid address 0xd0...
# TC1.6 PASS: Write to invalid addr 0xd0 failed as expected (PSLVERR = 1).
# => Writing random data 0xe5 to invalid address 0xfc...
# TC1.6 PASS: Write to invalid addr 0xfc failed as expected (PSLVERR = 1).
# => Writing random data 0x3b to invalid address 0xa7...
# TC1.6 PASS: Write to invalid addr 0xa7 failed as expected (PSLVERR = 1).
# => Writing random data 0xa1 to invalid address 0xbe...
# TC1.6 PASS: Write to invalid addr 0xbe failed as expected (PSLVERR = 1).
# => Writing random data 0x8e to invalid address 0x85...
# TC1.6 PASS: Write to invalid addr 0x85 failed as expected (PSLVERR = 1).
# => Writing random data 0x15 to invalid address 0xa0...
# TC1.6 PASS: Write to invalid addr 0xa0 failed as expected (PSLVERR = 1).
# => Writing random data 0xc4 to valid address 0x00...
# TC1.6 PASS: Write to valid addr 0x00 worked as expected (PSLVERR = 0).
# => Writing random data 0xa8 to invalid address 0x8b...
# TC1.6 PASS: Write to invalid addr 0x8b failed as expected (PSLVERR = 1).
# => Writing random data 0x6c to invalid address 0xbd...
# TC1.6 PASS: Write to invalid addr 0xbd failed as expected (PSLVERR = 1).
# => Writing random data 0xab to invalid address 0x7d...
# TC1.6 PASS: Write to invalid addr 0x7d failed as expected (PSLVERR = 1).
# => Writing random data 0x61 to invalid address 0xaa...
# TC1.6 PASS: Write to invalid addr 0xaa failed as expected (PSLVERR = 1).
# => Writing random data 0x56 to invalid address 0xb2...
# TC1.6 PASS: Write to invalid addr 0xb2 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0x46...
# TC1.6 PASS: Write to invalid addr 0x46 failed as expected (PSLVERR = 1).
# => Writing random data 0xd4 to invalid address 0xe1...
# TC1.6 PASS: Write to invalid addr 0xe1 failed as expected (PSLVERR = 1).
# => Writing random data 0x60 to invalid address 0x21...
# TC1.6 PASS: Write to invalid addr 0x21 failed as expected (PSLVERR = 1).
# => Writing random data 0x06 to invalid address 0x69...
# TC1.6 PASS: Write to invalid addr 0x69 failed as expected (PSLVERR = 1).
# => Writing random data 0x7e to invalid address 0xf4...
# TC1.6 PASS: Write to invalid addr 0xf4 failed as expected (PSLVERR = 1).
# 
# [--- Up-Counting and Check Overflow with CLK_IN[0] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[1] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[2] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Up-Counting and Check Overflow with CLK_IN[3] ---]
# Start count = 8'hFD | Current count = 0x02
# TC2.1-1 PASS: TMR_OVF flag is set exactly
# TC2.1-2 PASS: OVF flag set by HW
# TC2.1-3 PASS: OVF cleared by SW
# TC2.1-3 PASS: OVF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[0] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[1] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[2] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# [--- Down-Counting and Underflow with CLK_IN[3] ---]
# Start count = 8'h02 | Current count = 0xfd
# TC2.2-1 PASS: TMR_UDF flag is set exactly
# TC2.2-2 PASS: OVF flag set by HW
# TC2.2-3 PASS: UDF cleared by SW
# TC2.2-3 PASS: UDF flag is cleared exactly
# 
# === TEST for CKS=0, start=0xca (upcount) ===
# TCR after program_and_start: 0x10
#   inc_needed=54, pclk_cycles_to_ovf=108, margin=100, th2_wait=138
# CKS=0 Thread1: ERROR - OVF observed but TCNT=0x2 (expected 0x0)
# CKS=0 Thread1: PASS - OVF observed at time 115895000 (after 4 cycles), TCNT=0x2
# CKS=0 Thread2: FAULT - OVF too early TSR=0x1, TCNT=0x45
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0xaf (upcount) ===
# TCR after program_and_start: 0x11
#   inc_needed=81, pclk_cycles_to_ovf=324, margin=100, th2_wait=282
# ERROR: CLK_IN[1] not toggling!
# CKS=1 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xf8
# CKS=1 Thread1: ERROR - OVF observed but TCNT=0x1 (expected 0x0)
# CKS=1 Thread1: PASS - OVF observed at time 120675000 (after 319 cycles), TCNT=0x1
# CKS=1: PASS (th1+th2 ok)
# 
# === TEST for CKS=2, start=0x46 (upcount) ===
# TCR after program_and_start: 0x12
#   inc_needed=186, pclk_cycles_to_ovf=1488, margin=100, th2_wait=1058
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0xcb
# CKS=2 Thread1: PASS - OVF observed at time 135755000 (after 1484 cycles), TCNT=0x0
# CKS=2: PASS (th1+th2 ok)
# 
# === TEST for CKS=3, start=0xfe (upcount) ===
# TCR after program_and_start: 0x13
#   inc_needed=2, pclk_cycles_to_ovf=32, margin=100, th2_wait=88
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no OVF yet TSR=0x0, TCNT=0x8
# CKS=11 Thread1 TIMEOUT: TCNT=0xa, TCR=0x13, steps=2 factor=16
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=3: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=0, start=0xd (downcount) ===
# TCR after program_and_start: 0x30
#   dec_needed=13, pclk_cycles_to_udf=26, margin=100, th2_wait=84
# CKS=0 Thread1: ERROR - UDF observed but TCNT=0xfd (expected 0x0)
# CKS=0 Thread1: PASS - UDF observed at time 137795000 (after 23 cycles), TCNT=0xfd
# CKS=0 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xde
# CKS=0: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=1, start=0x1f (downcount) ===
# TCR after program_and_start: 0x31
#   dec_needed=31, pclk_cycles_to_udf=124, margin=100, th2_wait=149
# CKS=1 Thread1: ERROR - UDF observed but TCNT=0xfe (expected 0x0)
# CKS=1 Thread1: PASS - UDF observed at time 139875000 (after 122 cycles), TCNT=0xfe
# CKS=1 Thread2: FAULT - UDF too early TSR=0x2, TCNT=0xf7
# CKS=1: FAIL (th1=1 th2=0) err_cnt=2
# 
# === TEST for CKS=2, start=0x21 (downcount) ===
# TCR after program_and_start: 0x32
#   dec_needed=33, pclk_cycles_to_udf=264, margin=100, th2_wait=242
# ERROR: CLK_IN[2] not toggling!
# CKS=2 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0xd5
# CKS=10 Thread1 TIMEOUT: TCNT=0xc6, TCR=0x32, steps=33 factor=8
# Hint: check TCR.EN and CKS bits; if EN=0 timer won't count.
# CKS=2: FAIL (th1=0 th2=1) err_cnt=2
# 
# === TEST for CKS=3, start=0xcf (downcount) ===
# TCR after program_and_start: 0x33
#   dec_needed=207, pclk_cycles_to_udf=3312, margin=100, th2_wait=2274
# ERROR: CLK_IN[3] not toggling!
# CKS=3 Thread2: PASS - no UDF yet TSR=0x0, TCNT=0x41
# CKS=3 Thread1: ERROR - UDF observed but TCNT=0xff (expected 0x0)
# CKS=3 Thread1: PASS - UDF observed at time 177515000 (after 3323 cycles), TCNT=0xff
# CKS=3: PASS (th1+th2 ok)
# 
# [--- TC2.5: UP-Count Timer Pause/Resume Test with CLK_IN[0] ---]
# counter before pause = 0x08
# TC2.5-1 FAIL: TCNT changed during pause, expected 0x08, got 0x0a
# TC2.5-2 PASS: TCNT resumed
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: UP-Count Timer Pause/Resume Test with CLK_IN[1] ---]
# counter before pause = 0xf6
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xf6, got 0xf7
# TC2.5-2 PASS: TCNT resumed
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: UP-Count Timer Pause/Resume Test with CLK_IN[2] ---]
# counter before pause = 0xfd
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xfd
# TC2.5-2 PASS: TCNT resumed
# TC2.5: PASS
# 
# [--- TC2.5: UP-Count Timer Pause/Resume Test with CLK_IN[3] ---]
# counter before pause = 0x85
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0x85
# TC2.5-2 PASS: TCNT resumed
# TC2.5: PASS
# 
# [--- TC2.5: DOWN-Count Timer Pause/Resume Test with CLK_IN[0] ---]
# counter before pause = 0xfa
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xfa, got 0xfc
# TC2.5-2 PASS: TCNT resumed
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: DOWN-Count Timer Pause/Resume Test with CLK_IN[1] ---]
# counter before pause = 0xab
# TC2.5-1 FAIL: TCNT changed during pause, expected 0xab, got 0xac
# TC2.5-2 PASS: TCNT resumed
# TC2.5: FAIL with 1 errors
# 
# [--- TC2.5: DOWN-Count Timer Pause/Resume Test with CLK_IN[2] ---]
# counter before pause = 0xd3
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xd3
# TC2.5-2 PASS: TCNT resumed
# TC2.5: PASS
# 
# [--- TC2.5: DOWN-Count Timer Pause/Resume Test with CLK_IN[3] ---]
# counter before pause = 0xc6
# TC2.5-1 PASS: TCNT unchanged during pause, value = 0xc6
# TC2.5-2 PASS: TCNT resumed
# TC2.5: PASS
# 
# === Test finished at 197045000, Total errors: 19 ===
# ** Note: $finish    : tb/tb_ip_TIMER.sv(753)
#    Time: 197045 ns  Iteration: 1  Instance: /tb_ip_TIMER
# 1
# Break in Module tb_ip_TIMER at tb/tb_ip_TIMER.sv line 753
#  coverage save -onexit -directive -codeAll tb_ip_TIMER.ucdb 
#  quit 
vcover report -html tb_ip_TIMER.ucdb
# *** Warning: No license found for full html report. The output will not have any testplan data.
# Report created in covhtmlreport/index.html
